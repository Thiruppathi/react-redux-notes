{"name":"React-redux-notes","tagline":"Study notes of React-Redux from DanAbramov's Talk","body":"# react-redux-notes\r\nStudy notes of React-Redux from DanAbramov's Talk\r\n\r\n## 1. The Single Immutable State Tree\r\n\r\nThe first principle of Redux is, the entire application's state is managed through a Single JS Object i.e, **'Single Immutable State Tree'**.\r\n\r\nEverything that changes within the application, including the data & the UI State are contained in single JS Object called 'State Tree'.\r\n\r\nIn more complex applications, more state to keep track of. You can track back the state changes from this State tree.\r\n\r\n\r\n## 2. Describing State changes with Actions\r\n\r\nThe state-tree is read-only.\r\n\r\nWhenever you want to change the state, you need to dispatch an action.\r\n\r\nAn action is a plain js object which defines the change.\r\n\r\nJust like the State is the minimial representation of data in the app,\r\nThe Action is the minimal representation of the change to the data.\r\n\r\nThe structure of Action object is up to you, the only requirement is that it has a\r\n\r\n`type` property, which is not undefined.\r\n\r\nIts suggested that to use \"String\" as it's serializable.\r\n\r\nDifferent type of apps have Different type of actions. We don't need additional information for passing the action.\r\n\r\n\r\n## 3. Pure & Impure Function\r\n\r\nIts important to understand the pure & impure functions.\r\n\r\n### Pure Functions\r\n\r\nPure Functions are the functions whose return values are solely dependent on the parameters passed on to the functions. Pure Functions doesn't have any observable side effects such as network/database calls.\r\n\r\nYou can be confident that if you call a pure function, for the  same arguments, your are gonna get the same return values always. Results are predictable.\r\n\r\n\r\n```\r\nfunction square(x) {\r\n  return x * x;\r\n}\r\n```\r\nPure functions doesn't modify the values to passed to them. In the following example, the items array is not modified, instead it returns a new Array, by using items.map();\r\n\r\n```\r\nfunction squareAll(items) {\r\n  return items.map(square);\r\n}\r\n```\r\n\r\n### Impure Functions\r\n\r\nOn the opposite,  Impure functions, they may have side effects;\r\nthey may call db, make network requests, they may override the values to passed to them.\r\n\r\n```\r\nfunction square(x) {\r\n  updateXinDB(x);\r\n  return x * x;\r\n}\r\n\r\nfunction squareAll(items) {\r\n  for(let i=0; i<items.length; i++ ){\r\n    items[i] = square(items[i]);\r\n  }\r\n}\r\n```\r\n\r\n\r\n## 4. The Reducer Function\r\n\r\nThe UI/View layer is more predictable, when it is just described as pure functions of the application state. This approach was pioneered by React.\r\n\r\nRedux complements this approach with another idea.\r\n\r\nThe state mutation in your app should be  described as pure function.\r\n\r\nThat takes `PreviousState` , `ActionBeingDispatched` and return the `NextState` of your application.\r\n\r\n\r\nIn any redux application, there is one particular function that takes the  state of the whole application and the action being dispatched and return the next state of the whole application.\r\n\r\nIt is important that it doesn't modify the state to given to it. It has to be pure and should only return the next state.(new object)\r\n\r\nThis function is called **'Reducer'** Function.\r\n\r\n## 5. Writing a counter Reducer with Tests\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}